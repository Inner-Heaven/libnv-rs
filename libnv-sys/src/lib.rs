#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen 0.63.0 */

pub type __int64_t = ::std::os::raw::c_long;
pub type __off_t = __int64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: __int64_t,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(__mbstate8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__mbstate_t), "::", stringify!(_mbstateL))
    );
}
pub type __va_list = __builtin_va_list;
pub type va_list = __va_list;
pub type fpos_t = __off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<__sbuf>(), 16usize, concat!("Size of: ", stringify!(__sbuf)));
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sbuf), "::", stringify!(_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__sbuf), "::", stringify!(_size))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut ::std::os::raw::c_uchar,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
    pub _fl_mutex: *mut pthread_mutex,
    pub _fl_owner: *mut pthread,
    pub _fl_count: ::std::os::raw::c_int,
    pub _orientation: ::std::os::raw::c_int,
    pub _mbstate: __mbstate_t,
    pub _flags2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        312usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_p))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_r))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_w))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_flags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_file))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_bf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_lbfsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_cookie))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_close))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_read))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_seek))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_write))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_ub))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._up) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_up))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_ur))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_ubuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_nbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_lb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_blksize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fl_mutex) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_fl_mutex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fl_owner) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_fl_owner))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fl_count) as usize - ptr as usize },
        168usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_fl_count))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._orientation) as usize - ptr as usize },
        172usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_orientation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstate) as usize - ptr as usize },
        176usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_mbstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        304usize,
        concat!("Offset of field: ", stringify!(__sFILE), "::", stringify!(_flags2))
    );
}
pub type FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvlist {
    _unused: [u8; 0],
}
pub type nvlist_t = nvlist;
extern "C" {
    pub fn nvlist_create(flags: ::std::os::raw::c_int) -> *mut nvlist_t;
}
extern "C" {
    pub fn nvlist_destroy(nvl: *mut nvlist_t);
}
extern "C" {
    pub fn nvlist_error(nvl: *const nvlist_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvlist_empty(nvl: *const nvlist_t) -> bool;
}
extern "C" {
    pub fn nvlist_flags(nvl: *const nvlist_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvlist_set_error(nvl: *mut nvlist_t, error: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvlist_clone(nvl: *const nvlist_t) -> *mut nvlist_t;
}
extern "C" {
    pub fn nvlist_dump(nvl: *const nvlist_t, fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvlist_fdump(nvl: *const nvlist_t, fp: *mut FILE);
}
extern "C" {
    pub fn nvlist_size(nvl: *const nvlist_t) -> usize;
}
extern "C" {
    pub fn nvlist_pack(nvl: *const nvlist_t, sizep: *mut usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nvlist_unpack(
        buf: *const ::std::os::raw::c_void,
        size: usize,
        flags: ::std::os::raw::c_int,
    ) -> *mut nvlist_t;
}
extern "C" {
    pub fn nvlist_send(sock: ::std::os::raw::c_int, nvl: *const nvlist_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvlist_recv(sock: ::std::os::raw::c_int, flags: ::std::os::raw::c_int) -> *mut nvlist_t;
}
extern "C" {
    pub fn nvlist_xfer(
        sock: ::std::os::raw::c_int,
        nvl: *mut nvlist_t,
        flags: ::std::os::raw::c_int,
    ) -> *mut nvlist_t;
}
extern "C" {
    pub fn nvlist_next(
        nvl: *const nvlist_t,
        typep: *mut ::std::os::raw::c_int,
        cookiep: *mut *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn nvlist_get_parent(
        nvl: *const nvlist_t,
        cookiep: *mut *mut ::std::os::raw::c_void,
    ) -> *const nvlist_t;
}
extern "C" {
    pub fn nvlist_get_array_next(nvl: *const nvlist_t) -> *const nvlist_t;
}
extern "C" {
    pub fn nvlist_in_array(nvl: *const nvlist_t) -> bool;
}
extern "C" {
    pub fn nvlist_get_pararr(
        nvl: *const nvlist_t,
        cookiep: *mut *mut ::std::os::raw::c_void,
    ) -> *const nvlist_t;
}
extern "C" {
    pub fn nvlist_exists(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_exists_type(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn nvlist_exists_null(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_exists_bool(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_exists_number(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_exists_string(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_exists_nvlist(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_exists_binary(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_exists_bool_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn nvlist_exists_number_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn nvlist_exists_string_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn nvlist_exists_nvlist_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn nvlist_exists_descriptor(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn nvlist_exists_descriptor_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn nvlist_add_null(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_add_bool(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char, value: bool);
}
extern "C" {
    pub fn nvlist_add_number(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char, value: u64);
}
extern "C" {
    pub fn nvlist_add_string(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn nvlist_add_stringf(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        valuefmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn nvlist_add_stringv(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        valuefmt: *const ::std::os::raw::c_char,
        valueap: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn nvlist_add_nvlist(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const nvlist_t,
    );
}
extern "C" {
    pub fn nvlist_add_binary(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn nvlist_add_bool_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const bool,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_add_number_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const u64,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_add_string_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const *const ::std::os::raw::c_char,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_add_nvlist_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const *const nvlist_t,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_add_descriptor(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvlist_add_descriptor_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_int,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_append_bool_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: bool,
    );
}
extern "C" {
    pub fn nvlist_append_number_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn nvlist_append_string_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn nvlist_append_nvlist_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *const nvlist_t,
    );
}
extern "C" {
    pub fn nvlist_append_descriptor_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvlist_move_string(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn nvlist_move_nvlist(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut nvlist_t,
    );
}
extern "C" {
    pub fn nvlist_move_binary(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn nvlist_move_bool_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut bool,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_move_string_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_move_nvlist_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut *mut nvlist_t,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_move_number_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut u64,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_move_descriptor(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvlist_move_descriptor_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
        nitems: usize,
    );
}
extern "C" {
    pub fn nvlist_get_bool(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_get_number(nvl: *const nvlist_t, name: *const ::std::os::raw::c_char) -> u64;
}
extern "C" {
    pub fn nvlist_get_string(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn nvlist_get_nvlist(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const nvlist_t;
}
extern "C" {
    pub fn nvlist_get_binary(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
        sizep: *mut usize,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn nvlist_get_bool_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *const bool;
}
extern "C" {
    pub fn nvlist_get_number_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *const u64;
}
extern "C" {
    pub fn nvlist_get_string_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn nvlist_get_nvlist_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *const *const nvlist_t;
}
extern "C" {
    pub fn nvlist_get_descriptor(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvlist_get_descriptor_array(
        nvl: *const nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *const ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvlist_take_bool(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn nvlist_take_number(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char) -> u64;
}
extern "C" {
    pub fn nvlist_take_string(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nvlist_take_nvlist(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut nvlist_t;
}
extern "C" {
    pub fn nvlist_take_binary(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        sizep: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nvlist_take_bool_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *mut bool;
}
extern "C" {
    pub fn nvlist_take_number_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *mut u64;
}
extern "C" {
    pub fn nvlist_take_string_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nvlist_take_nvlist_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *mut *mut nvlist_t;
}
extern "C" {
    pub fn nvlist_take_descriptor(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvlist_take_descriptor_array(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        nitemsp: *mut usize,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvlist_free(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_type(
        nvl: *mut nvlist_t,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvlist_free_null(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_bool(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_number(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_string(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_nvlist(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_binary(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_bool_array(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_number_array(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_string_array(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_nvlist_array(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_binary_array(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_descriptor(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvlist_free_descriptor_array(nvl: *mut nvlist_t, name: *const ::std::os::raw::c_char);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(gp_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(fp_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(reg_save_area))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread {
    pub _address: u8,
}
